<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://java.sun.com/jsf/html">

<ui:composition template="/WEB-INF/templates/defaultTemplate.xhtml">
    <ui:define name="title">
        <f:loadBundle var="i18nWorkspaceDashboard"
                      basename="com.docdoku.server.localization.admin.workspaceDashboard_resource"/>
        #{i18nWorkspaceDashboard['title']}
    </ui:define>

    <ui:define name="additional-scripts">

        <script type="text/javascript" src="/js/lib/charts/nv3d/lib/d3.v2.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/nv.d3.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/src/models/legend.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/src/models/pie.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/src/models/pieChart.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/src/models/discreteBar.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/src/models/discreteBarChart.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/src/utils.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/lib/fisheye.js"></script>
        <script type="text/javascript" src="/js/lib/charts/nv3d/custom/tooltip.js"></script>
        <script type="text/javascript" src="/js/lib/charts/helpers.js"></script>

        <link href="/css/charts/charts.css" rel="stylesheet" type="text/css" />
        <link href="/js/lib/charts/nv3d/src/nv.d3.css" rel="stylesheet" type="text/css" />

    </ui:define>

    <ui:define name="content">
        <ol class="breadcrumb">
            <li><h:link value="#{i18nTemplate['toplinks.admin']}" outcome="/admin/workspace/workspacesMenu.xhtml" />
                <span class="divider">/</span></li>
            <li class="active">#{i18nWorkspaceDashboard['title1']}</li>
        </ol>

        <div id="sidebar" class="well well-large">
            <h3>#{i18nWorkspaceDashboard['sidebar.title1']}</h3>
            <p>
                <h:outputFormat value="#{i18nWorkspaceDashboard['sidebar.text']}" escape="false"/>
            </p>
        </div>

        <h2>#{i18nWorkspaceDashboard['title1']} : #{adminStateBean.selectedWorkspace}</h2>

        <hr/>

        <div class="charts">

            <div class="chart" id="disk_usage_chart">
                <h3>#{i18nWorkspaceDashboard['chartTitles.diskusage']}</h3>
                <svg></svg>
                <p class="total"></p>
            </div>

            <div class="chart" id="entities_chart">
                <h3>#{i18nWorkspaceDashboard['chartTitles.entities']}</h3>
                <svg></svg>
            </div>

            <hr class="clear"/>
            <div class="chart" id="users_chart">
                <h3>#{i18nWorkspaceDashboard['chartTitles.users']}</h3>
                <svg></svg>
            </div>

            <hr class="clear"/>
            <div class="chart" id="cod_chart">
                <h3>#{i18nWorkspaceDashboard['chartTitles.checkedOutDocs']}</h3>
                <svg></svg>
                <p class="total"></p>
            </div>

            <hr class="clear"/>
            <div class="chart" id="cop_chart">
                <h3>#{i18nWorkspaceDashboard['chartTitles.checkedOutParts']}</h3>
                <svg></svg>
                <p class="total"></p>
            </div>

        </div>

        <script type="text/javascript">

            // Values from bean
            var diskUsage = #{adminStateBean.diskSpaceUsageStats};
            var usersCount = parseInt('#{adminStateBean.usersCount}');
            var documentsCount = parseInt('#{adminStateBean.documentsCount}');
            var productsCount = parseInt('#{adminStateBean.productsCount}');
            var partsCount = parseInt('#{adminStateBean.partsCount}');
            var cod = #{adminStateBean.checkedOutDocumentsStats};
            var cop = #{adminStateBean.checkedOutPartsStats};
            var usersInWorkspace = #{adminStateBean.usersInWorkspace};
            var usersStats = #{adminStateBean.usersStats};

            // Charts
            // ----------------------- DISK USAGE

            var diskUsageData = [];
            var totalDiskUsage = 0;

            for(var key in diskUsage){
                diskUsageData.push({key:key,y:diskUsage[key],f:bytesToSize(diskUsage[key])});
                totalDiskUsage+=diskUsage[key];
            }

            $("#disk_usage_chart p.total").html("#{i18nWorkspaceDashboard['chartInfos.totalusage']} : "+bytesToSize(totalDiskUsage));

            nv.addGraph(function() {
                var chart;
                var width = 400, height = 200;

                chart = nv.models.pieChart()
                        .x(function(d) { return d.key })
                        .y(function(d) { return d.y})
                         .showLabels(false)
                        .values(function(d) { return d })
                        .color(d3.scale.category10().range())
                        .width(width)
                        .height(height)
                        .donut(false)
                        .tooltipContent(function(x, y, e, graph){return diskUsageTooltip(x, e.point.f)});

                d3.select("#disk_usage_chart svg")
                        .datum([diskUsageData])
                        .transition().duration(1200)
                        .attr('width', width)
                        .attr('height', height)
                        .call(chart);

                return chart;
            });

            // ----------------------- ENTITIES

            var entitiesData = [];

            entitiesData.push({key:"Users",y:usersCount});
            entitiesData.push({key:"Documents",y:documentsCount});
            entitiesData.push({key:"Products",y:productsCount});
            entitiesData.push({key:"Parts",y:partsCount});

            nv.addGraph(function() {
                var width = 400, height = 200;
                var chart = nv.models.discreteBarChart()
                        .x(function(d) { return d.key })
                        .y(function(d) { return d.y })
                        .staggerLabels(true)
                        .tooltips(false)
                        .width(width)
                        .height(height)
                        .showValues(true);

                chart.yAxis.tickFormat(d3.format('.f'));

                d3.select('#entities_chart svg')
                        .datum([{key:"entities",values:entitiesData}])
                        .transition().duration(500)
                        .call(chart);

                return chart;
            });



            // ----------------------- USERS AND GROUPS

            var usersAndGroupData = [];

            for(var key in usersStats){
                usersAndGroupData.push({key:key,y:usersStats[key]});
            }

            nv.addGraph(function() {
                var width = 800, height = 200;
                var chart = nv.models.discreteBarChart()
                        .x(function(d) { return d.key })
                        .y(function(d) { return d.y })
                        .staggerLabels(true)
                        .tooltips(false)
                        .width(width)
                        .height(height)
                        .showValues(true);

                chart.yAxis.tickFormat(d3.format('.f'));

                d3.select('#users_chart svg')
                        .datum([{key:"entities",values:usersAndGroupData}])
                        .transition().duration(500)
                        .call(chart);

                return chart;
            });



            // ----------------------- CHECKED OUT DOCUMENTS

            var maxDays = 30 ;

            function calculateDaysSinceTimestamp(timestamp){
                var days = parseInt(((((new Date().getTime() - timestamp)/1000)/60)/60)/24);
                return days &lt; maxDays ? days+1 : maxDays;
            }

            var codData = [];
            var totalCod = 0;
            for(var user in cod){
                var documents = cod[user];
                var mapDayDoc = {};
                var userData = {
                    key: user,
                    values: []
                };
                for(var i = 0 ; i &lt; maxDays+1 ; i++){
                    mapDayDoc[i]=0;
                }
                for(var i = 0; i &lt; documents.length ; i++){
                    mapDayDoc[calculateDaysSinceTimestamp(documents[i].date)] ++;
                    totalCod++;
                }
                for(var day in mapDayDoc){
                    if(mapDayDoc[day] > 0){
                        userData.values.push({
                            x: day, y: mapDayDoc[day] , size: mapDayDoc[day]
                        });
                    }
                }
                codData.push(userData);
            }

            nv.addGraph(function() {
                var width = 900, height = 290;
                var chart = nv.models.scatterChart()
                        .showDistX(true)
                        .showDistY(true)
                        .width(width)
                        .height(height)
                        .forceX([0,maxDays])
                        .forceY([0,null])
                        .color(d3.scale.category10().range());

                chart.xAxis.tickFormat(d3.format('.f'));
                chart.xAxis.axisLabel("#{i18nWorkspaceDashboard['chartAxis.daysNumber']}");
                chart.yAxis.tickFormat(d3.format('.f'));
                chart.yAxis.axisLabel("#{i18nWorkspaceDashboard['chartAxis.documentsNumber']}");

                d3.select('#cod_chart svg')
                        .datum(codData)
                        .transition().duration(500)
                        .call(chart);

                nv.utils.windowResize(chart.update);

                return chart;
            });

            $("#cod_chart p.total").html("#{i18nWorkspaceDashboard['chartInfos.totalcod']} : "+totalCod);


            // ----------------------- CHECKED OUT PARTS


            var copData = [];
            var totalCop = 0;
            for(var user in cop){
                var parts = cop[user];
                var mapDayPart = {};
                var userData = {
                    key: user,
                    values: []
                };
                for(var i = 0 ; i &lt; maxDays+1 ; i++){
                    mapDayPart[i]=0;
                }
                for(var i = 0; i &lt; parts.length ; i++){
                    mapDayPart[calculateDaysSinceTimestamp(parts[i].date)] ++;
                    totalCop++;
                }
                for(var day in mapDayPart){
                    if(mapDayPart[day] > 0){
                        userData.values.push({
                            x: day, y: mapDayPart[day] , size: mapDayPart[day]
                        });
                    }
                }
                copData.push(userData);
            }


            nv.addGraph(function() {
                var width = 900, height = 290;
                var chart = nv.models.scatterChart()
                        .showDistX(true)
                        .showDistY(true)
                        .width(width)
                        .height(height)
                        .forceX([0,maxDays])
                        .forceY([0,null])
                        .color(d3.scale.category10().range());

                chart.xAxis.tickFormat(d3.format('.f'));
                chart.xAxis.axisLabel("#{i18nWorkspaceDashboard['chartAxis.daysNumber']}");
                chart.yAxis.tickFormat(d3.format('.f'));
                chart.yAxis.axisLabel("#{i18nWorkspaceDashboard['chartAxis.partsNumber']}");

                d3.select('#cop_chart svg')
                        .datum(copData)
                        .transition().duration(500)
                        .call(chart);

                nv.utils.windowResize(chart.update);

                return chart;
            });

            $("#cop_chart p.total").html("#{i18nWorkspaceDashboard['chartInfos.totalcop']} : "+totalCop);

        </script>

    </ui:define>
</ui:composition>
</html>
